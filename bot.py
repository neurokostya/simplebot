import os
import logging
from dotenv import load_dotenv
import aiohttp
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from poems_storage import PoemsStorage

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

DEEPSEEK_API_KEY = os.getenv('DEEPSEEK_API_KEY')
DEEPSEEK_API_URL = "https://api.deepseek.com/v1/chat/completions"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å—Ç–∏—Ö–æ–≤
poems_storage = PoemsStorage()

# –°—Ç–∏–ª–∏ —Å—Ç–∏—Ö–æ–≤
POEM_STYLES = {
    'classic': '–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ —Å —Ä–∏—Ñ–º–æ–π',
    'haiku': '—Ö–∞–π–∫—É (—Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏: 5-7-5 —Å–ª–æ–≥–æ–≤)',
    'free': '–≤–µ—Ä–ª–∏–±—Ä (—Å–≤–æ–±–æ–¥–Ω—ã–π —Å—Ç–∏—Ö)',
    'funny': '–≤–µ—Å—ë–ª–æ–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ —Å —é–º–æ—Ä–æ–º',
    'romantic': '—Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ'
}

async def generate_poem(theme: str, style: str = 'classic') -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é —Ç–µ–º—É –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å—Ç–∏–ª–µ"""
    style_description = POEM_STYLES.get(style, POEM_STYLES['classic'])
    prompt = f"""–ù–∞–ø–∏—à–∏ {style_description} –Ω–∞ —Ç–µ–º—É "{theme}".
    –°—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
    –î–æ–±–∞–≤—å —ç–º–æ–¥–∑–∏, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫ —Ç–µ–º–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è."""

    headers = {
        "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
        "Content-Type": "application/json"
    }
    
    data = {
        "model": "deepseek-chat",
        "messages": [{"role": "user", "content": prompt}],
        "temperature": 0.7
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(DEEPSEEK_API_URL, headers=headers, json=data) as response:
                if response.status == 200:
                    result = await response.json()
                    return result['choices'][0]['message']['content']
                else:
                    return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è: {response.status}"
    except Exception as e:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"

def get_style_keyboard():
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è"""
    keyboard = []
    for style, description in POEM_STYLES.items():
        keyboard.append([InlineKeyboardButton(description, callback_data=f"style_{style}")])
    return InlineKeyboardMarkup(keyboard)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = [
        [KeyboardButton("üé® –í—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å")],
        [KeyboardButton("‚ùì –ü–æ–º–æ—â—å")],
        [KeyboardButton("üìù –ú–æ–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å—Ç–∏—Ö–∏")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ—ç—Ç! ‚ú®\n'
        '–Ø –º–æ–≥—É –ø–∏—Å–∞—Ç—å —Å—Ç–∏—Ö–∏ –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∏–ª—è—Ö!\n'
        '–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Ç–µ–º—É –¥–ª—è —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è! (Ôºæ‚ñΩÔºæ)',
        reply_markup=reply_markup
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "–Ø —É–º–µ—é –ø–∏—Å–∞—Ç—å —Å—Ç–∏—Ö–∏ –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∏–ª—è—Ö! ‚ï∞(‚ñî‚àÄ‚ñî)‚ïØ\n\n"
        "üé® –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏:\n"
    )
    for style, description in POEM_STYLES.items():
        help_text += f"‚Ä¢ {description}\n"
    
    help_text += "\n–ö–æ–º–∞–Ω–¥—ã:\n"
    help_text += "/start - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ\n"
    help_text += "/style - –í—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è\n"
    help_text += "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
    help_text += "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Ç–µ–º—É, –∏ —è —Å–æ—á–∏–Ω—é —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ! ‚ú®"
    
    await update.message.reply_text(help_text)

async def style_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /style"""
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è:",
        reply_markup=get_style_keyboard()
    )

async def handle_style_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è"""
    query = update.callback_query
    await query.answer()
    
    style = query.data.replace("style_", "")
    context.user_data['current_style'] = style
    
    await query.message.reply_text(
        f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –ø–∏—Å–∞—Ç—å –≤ —Å—Ç–∏–ª–µ: {POEM_STYLES[style]}\n"
        "–ù–∞–ø–∏—à–∏ –º–Ω–µ —Ç–µ–º—É –¥–ª—è —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è! ‚ú®"
    )

async def show_saved_poems(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å—Ç–∏—Ö–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    poems = poems_storage.get_user_poems(user_id)
    
    if not poems:
        await update.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å—Ç–∏—Ö–æ–≤! (ÔºûÔπèÔºú)")
        return
    
    response = "–¢–≤–æ–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å—Ç–∏—Ö–∏:\n\n"
    for i, poem_data in enumerate(poems, 1):
        response += f"{i}. –¢–µ–º–∞: {poem_data['theme']}\n"
        response += f"–°—Ç–∏–ª—å: {POEM_STYLES[poem_data['style']]}\n"
        response += f"–î–∞—Ç–∞: {poem_data['timestamp']}\n"
        response += f"\n{poem_data['poem']}\n\n"
        
        if i < len(poems):
            response += "---\n\n"
    
    await update.message.reply_text(response)

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith("style_"):
        await handle_style_callback(update, context)
    elif query.data.startswith("regenerate_"):
        theme = query.data.replace("regenerate_", "")
        style = context.user_data.get('current_style', 'classic')
        poem = await generate_poem(theme, style)
        
        keyboard = [
            [
                InlineKeyboardButton("‚ôªÔ∏è –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"regenerate_{theme}"),
                InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_poem")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.reply_text(
            f"–í–æ—Ç –Ω–æ–≤–æ–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –ø—Ä–æ {theme}:\n\n{poem}",
            reply_markup=reply_markup
        )
    elif query.data == "save_poem":
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ–º
        message_text = query.message.text
        theme = message_text.split("–ø—Ä–æ ")[1].split(":")[0]
        poem = message_text.split("\n\n", 1)[1]
        style = context.user_data.get('current_style', 'classic')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ
        poems_storage.add_poem(
            user_id=query.from_user.id,
            poem=poem,
            theme=theme,
            style=style
        )
        
        await query.message.reply_text("–°—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! ‚ú®")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text
    
    if text == "üé® –í—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å":
        await style_command(update, context)
        return
    elif text == "‚ùì –ü–æ–º–æ—â—å":
        await help_command(update, context)
        return
    elif text == "üìù –ú–æ–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å—Ç–∏—Ö–∏":
        await show_saved_poems(update, context)
        return
    
    style = context.user_data.get('current_style', 'classic')
    await update.message.reply_text("–°–æ—á–∏–Ω—è—é —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ... (‚óï‚Äø‚óï‚úø)")
    poem = await generate_poem(text, style)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–¥ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ–º
    keyboard = [
        [
            InlineKeyboardButton("‚ôªÔ∏è –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"regenerate_{text}"),
            InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_poem")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"–í–æ—Ç —á—Ç–æ —è —Å–æ—á–∏–Ω–∏–ª(–∞) –ø—Ä–æ {text}:\n\n{poem}",
        reply_markup=reply_markup
    )

def main():
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv('BOT_TOKEN')
    
    if not DEEPSEEK_API_KEY:
        print("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω DEEPSEEK_API_KEY –≤ —Ñ–∞–π–ª–µ .env")
        return
    
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = Application.builder().token(token).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler('start', start_command))
    app.add_handler(CommandHandler('help', help_command))
    app.add_handler(CommandHandler('style', style_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤
    app.add_handler(CallbackQueryHandler(handle_callback_query))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print('–ë–æ—Ç-–ø–æ—ç—Ç –∑–∞–ø—É—â–µ–Ω! (‚óï‚Äø‚óï‚úø)')
    app.run_polling(poll_interval=1)

if __name__ == '__main__':
    main() 